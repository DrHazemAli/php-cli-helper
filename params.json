{"name":"php-cli-helper","tagline":"A simple class to make php shell scripts easier to write.","body":"php-cli-helper\r\n===================\r\n\r\nA simple class to make php shell scripts easier to write.\r\n\r\nAll you need to do is require CLI.php and you are good to go. \r\nBelow are the basic functions\r\n\r\n###### Output\r\n-------------------------\r\n```php\r\n  CLI::out(\"This text is indented\");\r\n  // Adding false as the second parameter will remove the newline\r\n  CLI::out('Working...', false);\r\n  // Adding a dash at the beginning will remove the indent\r\n  CLI::out('-Done.');\r\n  // Here are some status functions, these functions color the \r\n  // tag to indicate the status. (Although I cant show that here.)\r\n  CLI::info('Testing something...');\r\n  CLI::warning('Uh oh. Be cautious.');\r\n  CLI::success('Awesome it worked!');\r\n  CLI::error('O no. That didnt work.');\r\n  // Fail will exit the script for you.\r\n  CLI::fail('Something really bad happened exit the script');\r\n  // Create your own custom status with the following\r\n  // Check the resources/colors.php for specific color constants.\r\n  CLI::custom('ALERT', CLI_UND_WHITE, 'Check out my white underlined text');\r\n  // Want to use color text in your output? No problem just use the following.\r\n  $coloredText = CLI::color('Chason Choate', CLI_DARK_BLUE);\r\n  CLI::out(\"Hi my name is $coloredText.\");\r\n  \r\n  \r\n  // Output\r\n  This text is indented\r\n  Working...Done.\r\n  [INFO] Testing something...\r\n  [WARNING] Uh oh. Be cautious.\r\n  [SUCCESS] Awesome it worked!\r\n  [ERROR] O no. That didnt work.\r\n  [ERROR] Something really bad happened exit the script\r\n  [ALERT] Check out my white underlined text\r\n  Hi my name is Chason Choate.\r\n```\r\n\r\n###### Input\r\n-------------------------\r\nThere are two functions available for getting user input.\r\n```php\r\n  $answer = CLI::in(\"What's your favorite beer?\");\r\n  // With loopIn you can specify responses the user must enter or quit\r\n  // If the user enters an invalid input it will show the prompt again.\r\n  $answer = CLI::loopIn(\"What's your favorite OS?\", array(\"Mac\", \"Windows\"));\r\n  if ($answer == 'Mac')\r\n    CLI::out(\"Macs are pretty cool.\");\r\n  // Output\r\n  What's your favorite beer? : <user types here and hits enter>\r\n  What's your favorite OS? [Mac,Windows,q] : Linux\r\n  What's your favorite OS? [Mac,Windows,q] : Mac\r\n  Macs are pretty cool.\r\n```\r\n\r\n###### Running commands/scripts\r\n---------------------------\r\nThis is how you make stuff happen and catch any errors if they occur.\r\n```php\r\n  CLI::run(\"cp test-dir test-dir-2\");\r\n  // After the command completes there are two important pieces of info you need\r\n  // CLI::$lastCmdStatus => Int, Holds the exit status of the command.\r\n  // Exit status: 0 typically means the script finished successfully.\r\n  // CLI::$lastCmdOutput => Array, holds the output lines from the command.\r\n  if (CLI::$lastCmdStatus !== 0)\r\n      CLI::fail(\"Could not copy the directory.\");\r\n```\r\n\r\n###### Advanced stuff\r\n---------------------------\r\nBelow are some examples of additional functions in the CLI class.\r\n```php\r\n  // The outLine function will output a string on the same line\r\n  // good for counting/percentages/etc.\r\n  for ($i = 0; $i < 1000; $i++)\r\n    CLI::outLine($i);\r\n    \r\n  // Checkout the progress example script for how to use the progress function.\r\n  Downloading a really large file...\r\n  2% [=>------------------------------------] 00:10\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}